.bazel-test-all:
  extends:
    - .bazel-rules-pipeline
    - .bazel-build-k8s
    - .ic-build-bazel-image
  stage: test
  needs: []
  artifacts:
    when: always
    paths:
      - bazel-build-log*.json*
    reports:
      junit: bazel-testlogs-gitlab/**/test.xml
  variables:
    BAZEL_COMMAND: "test"
    BAZEL_TARGETS: "//..."
  script:
    - ./gitlab-ci/src/bazel-ci/main.sh
  after_script:
    - |
      set +e # Do not fail in the after_script, try to do as much as possible instead.
      echo -e "\033[0;31m"
      echo -e "*************************************************************"
      echo -e "*** NEED BAZEL HELP? See go/bazel-guide and #project-bazel **"
      echo -e "*************************************************************"
      echo -e "\033[0m"
    - cp -R "$(realpath bazel-testlogs)" bazel-testlogs-gitlab
    - gzip bazel-build-log*.json
    - !reference [after_script]

bazel-test-all:
  extends:
    - .bazel-test-all
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going"
    BAZEL_TARGETS: "//..."
    BAZEL_UPLOAD_TARGETS: "//..."

.scheduled-bazel-system-test:
  extends:
    - .bazel-test-all
  variables:
    BAZEL_EXTRA_ARGS: "--test_tag_filters=${BAZEL_TEST_TAG_FILTERS} --build_event_json_file=./build_event_file.json"
    BAZEL_TARGETS: "//..."
  artifacts:
    when: always
    paths:
      - output_dir/
      - build_event_file.json
  after_script:
    - |
      mkdir output_dir
      export OUTPUT_DIR="$PWD/output_dir"
      export BUILD_EVENT_JSON_PATH="$PWD/build_event_file.json"
      export SLACK_WEBHOOK_URL
      export HONEYCOMB_API_TOKEN
      bazel run //rs/tests:post_processing
    - !reference [after_script]

bazel-system-test-hourly:
  extends:
    - .scheduled-bazel-system-test
    - .bazel-rules-post-master
  variables:
    BAZEL_TEST_TAG_FILTERS: "system_test_hourly"

bazel-system-test-nightly:
  extends:
    - .scheduled-bazel-system-test
    - .rules-rollout-pipeline-auto
  variables:
    BAZEL_TEST_TAG_FILTERS: "system_test_nightly"

bazel-config-check-all-rebuild:
  extends:
    - .bazel-test-all
  variables:
    BAZEL_EXTRA_ARGS: "--repository_cache=/cache/bazel --keep_going --config=check"
    BAZEL_COMMAND: "build"
    BAZEL_TARGETS: "//rs/..."

bazel-cache-perf-test-linux:
  extends:
    - bazel-test-all
    - .bazel-rules-post-master
  needs:
    - bazel-test-all
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output"

bazel-test-all-rebuild:
  extends:
    - .bazel-test-all
    - .bazel-rules-post-master
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output"
    BAZEL_EXTRA_ARGS: "--repository_cache= --disk_cache= --noremote_accept_cached --remote_instance_name=${CI_COMMIT_SHA} --@rules_rust//rust/settings:pipelined_compilation=True"

bazel-test-all-macos:
  extends:
    - .build-env-base
    - .bazel-test-all
  tags:
    - macos
  variables:
    BAZEL_STARTUP_ARGS: "--output_base /var/tmp/bazel-output//${CI_CONCURRENT_ID}"
    BAZEL_COMMAND: "build"
    BAZEL_TARGETS: "//rs/..."
    BAZEL_UPLOAD_TARGETS: "//publish/sdk/..."
    BAZEL_EXTRA_ARGS: "--config dev"

bazel-cache-perf-test-macos:
  extends:
    - bazel-test-all-macos
    - .bazel-rules-post-master
  needs:
    - bazel-test-all-macos

bazel-cargo-test-parity:
  extends:
    - .bazel-test-all
    - .bazel-rules-test-parity
    - .ic-build-image
  artifacts:
    when: always
    paths:
      - artifacts/*
  script:
    - |
      set -eufo pipefail
      echo "Checking bazel vs cargo test parity"

      ./bazel/test_parity/compare_covered_tests.sh
