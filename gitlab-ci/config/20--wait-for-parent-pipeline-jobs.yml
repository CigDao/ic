# Workaround to https://gitlab.com/gitlab-org/gitlab/-/issues/356016
# According to the documentation "needs:" can point to a job in the parent pipeline:
#  https://docs.gitlab.com/ee/ci/yaml/#needspipelinejob
# It does not work as expected however - the job does not wait for the from the the parent pipeline to fitnish.
# This workaround creates a stub job that uses GitLab API to pull the status of the specific job in the parent pipeline
# and to pass the status of that job as it's own exit status, so other jobs can have it in their "needs:" section.

.wait-for-parent-pipeline-job:
  extends:
    - .ubuntu-docker-k8s
    - .rules-parent-pipeline-autorun-on-trigger
  stage: test
  variables:
    JOB_NAME: "bazel-test-all"
  artifacts:
    when: always
    paths:
      - jobs.json
  script:
    - |
      while true; do
        curl --output jobs.json --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
             "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/pipelines/${PARENT_PIPELINE_ID}/jobs?include_retried=true&per_page=100"
        jq ".[] | select (.name == \"${JOB_NAME}\") | .status" jobs.json > states.lst

        if ! grep -qF '' states.lst ; then
          echo "No '${JOB_NAME}' job found in the parent pipeline. Wrong job name?" >&2
          exit 1

        elif grep -qE 'created|running|pending' states.lst ; then
          echo "Job '${JOB_NAME}' not finished yet. Sleeping ..."
          sleep 60

        elif grep -qF 'success' states.lst ; then
          echo "Job '${JOB_NAME}' finished successfully."
          exit

        elif grep -qF 'failed' states.lst ; then
          echo "Job '${JOB_NAME}' failed." >&2
          exit 1

        else
          echo "Don't know how to interpet the state(s) for the job '$JOB_NAME':" >&2
          cat states.lst >&2
          exit 1
        fi
      done

wait-for-bazel-test-all:
  extends:
    - .wait-for-parent-pipeline-job
