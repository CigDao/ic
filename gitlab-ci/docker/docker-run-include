#!/usr/bin/env bash
# Initialize the args for starting the docker container.

set -eEuo pipefail

REPO_ROOT="$(
    cd "$(dirname "$0")"
    git rev-parse --show-toplevel
)"

IMAGE_TAG=${IMAGE_TAG:-$($REPO_ROOT/gitlab-ci/docker/docker-get-image-tag.sh)}


USER=$(whoami)
if [ $USER == ubuntu ]; then
    PREFIX=""
else
    SET_UID="$(id -u $USER)"
    PREFIX="$USER-$SET_UID-"
fi

IMAGE="${IMAGE:-dfinity/ic-build:$PREFIX$IMAGE_TAG}"
BAZEL_IMAGE="dfinity/ic-build-bazel:$PREFIX$IMAGE_TAG"
WORKDIR="/ic"

DOCKER_RUN_ARGS=(
    -w "$WORKDIR"

    -v /dev/kvm:/dev/kvm

    # Environment variables matching what GitLab sets in CI pipelines to make scripts easier to debug
    -e CI_PROJECT_DIR=${CI_PROJECT_DIR:-"$WORKDIR"}
    -e CI_COMMIT_SHA=${CI_COMMIT_SHA:-"$(git rev-parse HEAD)"}
    -e CI_JOB_NAME=${CI_JOB_NAME:-""}
    -e SHELL_WRAPPER="${SHELL_WRAPPER:-/usr/bin/time}"
    -e VERSION=${VERSION:-"$(git rev-parse HEAD)"}
    -e CI_COMMIT_REF_PROTECTED="${CI_COMMIT_REF_PROTECTED:-true}"
)

if [ -e /var/run/docker.sock ]; then
    DOCKER_RUN_ARGS+=(
        -v /var/run/docker.sock:/var/run/docker.sock
    )
fi

# if i'm not withing docker already, bind mount the source
if [ ! -e /.dockerenv ] && ! [[ "$IMAGE" =~ ic-build.*-bd ]]; then
    mkdir -p "${REPO_ROOT}/rs/target"
    mkdir -p "${HOME}/.cache/bazel"
    mkdir -p "${HOME}/.aws"
    # Important: The mount points inside the docker container must match
    # the corresponding environment variables [e.g. defined in the Dockerfile]
    DOCKER_RUN_ARGS+=(
        # we would make this readonly to ensure people don't accidentally chown things
        # to ubuntu, but it also prevents cargo from updating Cargo.lock.
        # But at this moment this isn't practical because build time gen rules
        # [e.g. proto gen rules] need to write into the repo source directory.
        --mount type=bind,source="${REPO_ROOT}",target="${WORKDIR}"

        --mount type=bind,source="${HOME}/.cache",target="${HOME}/.cache"
        --mount type=bind,source="${HOME}/.ssh",target="${HOME}/.ssh"
        --mount type=bind,source="${HOME}/.aws",target="${HOME}/.aws"

        # target must match CARGO_TARGET_DIR.
        --mount type=bind,source="${REPO_ROOT}/rs/target",target=/cargo_target
        # destination must match CARGO_HOME.
        --mount type=volume,source="ic-cargo-${USER}",destination=/cargo
        # destination must match RUSTUP_HOME.
        --mount type=volume,source="ic-rustup-${USER}",destination=/opt/rustup

        # To achieve reproducibility we need to build disk images on a filesystem
        # with a known block size (the tmpfs filesystem uses 4K blocks).
        # See get_tmpdir_checking_block_size in checked_tmpdir.py for details.
        --mount type=tmpfs,destination=/var/sysimage
    )
elif [ -e /.dockerenv ]; then
    DOCKER_RUN_ARGS+=(
        --mount type=volume,source="ic-artifacts${CI_JOB_ID:-}",destination=/ic/artifacts
    )
else
    DOCKER_RUN_ARGS+=(
        --mount type=volume,source="ic-artifacts${USER:-}",destination=/ic/artifacts
    )
fi

if [ -z "${CI_DISPOSABLE_ENVIRONMENT:-}" ]; then
    DOCKER_RUN_ARGS+=(-it)
fi

if [ -n "${SSH_AUTH_SOCK:-}" ]; then
    DOCKER_RUN_ARGS+=(
        -v "$SSH_AUTH_SOCK:/ssh-agent"
        -e SSH_AUTH_SOCK="/ssh-agent"
    )
fi
