#!/usr/bin/env bash

set -euo pipefail

DISK_DIR=/ic/artifacts/icos
CANISTERS_DIR=/ic/artifacts/canisters
ROOT_DIR=$(git rev-parse --show-toplevel)
BUILD_BINARIES=true
BUILD_CANISTERS=true
BUILD_IMAGES=true
VERSION="${VERSION:-$(git rev-parse HEAD)}"

# required env variables from build scripts
export CI_JOB_ID=${CI_JOB_ID:-""}
export CI_JOB_NAME=${CI_JOB_NAME:-""}
export CI_COMMIT_REF_PROTECTED="${CI_COMMIT_REF_PROTECTED:-true}"
export ROOT_PIPELINE_ID=${ROOT_PIPELINE_ID:-""}
export CI_PROJECT_DIR=${CI_PROJECT_DIR:-$ROOT_DIR}
export BUILD_EXTRA_SUFFIX=${BUILD_EXTRA_SUFFIX:-""}
export BUILD_EXTRA_ARGS=${BUILD_EXTRA_ARGS:-""}
# Do not use remote cache, upload stats to buildfarm etc.
export BAZEL_CI_CONFIG="--config=local"

cd $ROOT_DIR

usage() {
    echo "by default, this script builds everything including the Binaries, Canisters and the IC OS Image."
    echo " "
    echo "options:"
    echo "-h, --help                    show brief help"
    echo "-dd, --disk-dir=\"dir\"       specify the disk build directory"
    echo "-cd, --canisters-dir=\"dir\"  specify the canisters build directory"
    echo "-a, --artifacts=\"b,c,i\"     chose which artifacts you want to build separated by a comma"
    echo "                              options: b or binaries, c or canisters, i or image"
    exit 0
}

# Process flags
while test $# -gt 0; do
    case "$1" in
        -h | --help) usage ;;
        -a* | --artifacts*)
            if [[ "$1" == *"="* ]]; then
                value=$(echo "$1" | sed -e 's/^[^=]*=//g')
            else
                shift
                value="$1"
            fi

            BUILD_BINARIES=false
            BUILD_CANISTERS=false
            BUILD_IMAGES=false

            # Iterate through the given artificats and sets the states
            IFS=',' read -ra options <<<"$value"
            for option in "${options[@]}"; do
                case "$option" in
                    b | binaries) BUILD_BINARIES=true ;;
                    c | canisters) BUILD_CANISTERS=true ;;
                    i | image) BUILD_IMAGES=true ;;
                esac
            done

            shift
            ;;
        -dd* | --disk-dir*)
            if [[ "$1" == *"="* ]]; then
                DISK_DIR=$(echo "$1" | sed -e 's/^[^=]*=//g')
            else
                shift
                DISK_DIR="$1"
            fi
            shift
            ;;
        -cd* | --canisters-dir*)
            if [[ "$1" == *"="* ]]; then
                CANISTERS_DIR=$(echo "$1" | sed -e 's/^[^=]*=//g')
            else
                shift
                CANISTERS_DIR="$1"
            fi
            shift
            ;;
    esac
done

if [ "$BUILD_IMAGES" == "true" ] && uname -s | grep Darwin; then
    echo "Building ICOS Image on Darwin is not supported!"
    echo "Specify only binaries and/or canisters."
    exit 0
fi

BINARIES_DIR=/ic/artifacts/release
if [ "$BUILD_BINARIES" == "true" ]; then
    echo "Building Binaries"
    mkdir -p "${BINARIES_DIR}"
    bazel build --config=local //publish/binaries
    bazel cquery --output=files //publish/binaries | xargs -I {} cp {} "${BINARIES_DIR}"
fi
if [ "$BUILD_CANISTERS" == "true" ]; then
    echo "Building Canisters"
    mkdir -p "${CANISTERS_DIR}"
    ic_version_rc_only="redacted"
    if [ "$CI_COMMIT_REF_PROTECTED" = "true" ]; then
        ic_version_rc_only="${VERSION}"
    fi
    bazel build --config=local --ic_version_rc_only="${ic_version_rc_only}" //publish/canisters
    bazel cquery --output=files //publish/canisters | xargs -I {} cp {} "${CANISTERS_DIR}"
fi
if [ "$BUILD_IMAGES" == "true" ]; then
    echo "Building IC-OS Guest Update Image"
    gitlab-ci/src/job_scripts/lib/guest-os-updateimg.sh "${DISK_DIR}"
fi

if [ "$BUILD_BINARIES" == "true" ]; then
    echo "Release Binaries"
    cd "${BINARIES_DIR}"
    # shellcheck disable=SC2035
    sha256sum -b *.gz
fi

if [ "$BUILD_CANISTERS" == "true" ]; then
    echo "Canister Binaries"
    # Neuron voters need to verify against the unzipped sha256sum.
    # Therefore automate their workflow here.
    tmp="$(mktemp -d)"
    pushd "$tmp"
    # shellcheck disable=SC2035
    cp "${CANISTERS_DIR}"/*.gz .
    # shellcheck disable=SC2035
    gunzip *
    # shellcheck disable=SC2035
    sha256sum *
    popd
    rm -fr "$tmp"
fi

if [ "$BUILD_IMAGES" == "true" ] && [ "$BUILD_BINARIES" == "true" ] && [ "$BUILD_CANISTERS" == "true" ]; then
    echo IC-OS Image
    cd "$DISK_DIR"
    # shellcheck disable=SC2035
    sha256sum -b *.tar.*
fi

echo "Build complete for revision $(git rev-parse HEAD)."
